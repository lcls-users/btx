import numpy as np
import os, sys
import argparse
import shutil
from psgeom import camera, sensors
from btx.interfaces.ipsana import PsanaInterface

def retrieve_from_mrxv(det_type, out_geom, mrxv_path='/cds/sw/package/autosfx/mrxv/geometries'):
    """
    Fetch latest geom file for this detector from mrxv. Currently
    assume that the file is in CrystFEL geom format. C
    
    Parameters
    ----------
    det_type : str
        detector name
    mrxv_path : str
        path to mrxv geom folder
    """
    try:
        in_geom = os.path.join(mrxv_path, f"{det_type}_latest.geom")
        print(in_geom)
        assert os.path.isfile(in_geom)
        print(f"Retrieving geom file {in_geom}")
    except:
        sys.exit("Detector type not yet available in mrxv")

    shutil.copyfile(in_geom, out_geom)

def modify_crystfel_coffset_res(input_file, output_file, coffset, res):
    """
    Overwrite the coffset and res entries in a CrystFEL .geom file. This is a 
    hack to fix Rayonix geom files generated using the wrong pixel size.
    
    Parameters
    ----------
    input_file : str
        input .geom file
    output_file : str
        output modified .geom file
    coffset : float
        coffset value in meters
    res : float
        pixel resolution in um
    """
    outfile = open(output_file, "w")

    with open(input_file, "r") as infile:
        for line in infile.readlines():
            
            if 'coffset' in line:
                start = line.split("=")[0].strip(" ")
                outfile.write(f"{start} = {coffset}\n")
                
            elif "res = " in line:
                start = line.split("=")[0].strip(" ")
                outfile.write(f"{start} = {res}\n")
            
            else:
                outfile.write(line)

    outfile.close()

def modify_crystfel_header(input_file, output_file):
    """
    Modify the header of a psgeom-generated Crystfel (.geom) file,
    specifically 1. uncommenting lines indicating the mask file and 
    LCLS parameters and 2. adding entries indicating the location of
    peaks in the cxi files.
    
    Parameters
    ----------
    input_file : str
        input .geom file generated by psgeom
    output_file : str
        output modified .geom file
    """
    outfile = open(output_file, "w")

    with open(input_file, "r") as infile:
        for line in infile.readlines():

            # uncomment by removing semicolon and space
            if line[0] == ';':
                if line.split()[1] in ['clen', 'photon_energy', 'adu_per_eV', 'mask', 'mask_good', 'mask_bad']:
                    outfile.write(line[2:]) 
                else:
                    outfile.write(line)

            # add these header lines for latest crystfel
            elif 'data = /entry_1/data_1/data' in line:
                outfile.write(line)
                outfile.write('\n')
                outfile.write('peak_list = /entry_1/result_1\n')
                outfile.write('peak_list_type = cxi\n')

            else:
                outfile.write(line)

    outfile.close()

def offset_geom(input_file, output_file, dx, dy, dz):
    """
    Modify the geometry in an input geom file by changing the center 
    and coffset distance. Currently the same adjustments are applied
    to all panels.
    
    Parameters
    ----------
    input_file : str
        input CrystFEL geom file
    output_file : str
        output geom file with updated metrology
    dx : float
        delta to adjust corner_x value by for all panels in pixels
    dy : float
        delta to adjust corner_y value by for all panels in pixels
    dz : float
        delta to adjust coffset value by for all panels in meters
    """
    outfile = open(output_file, "w")

    with open(input_file, "r") as infile:
        for line in infile.readlines():

            if 'coffset' in line:
                coffset = float(line.split('=')[1])
                outfile.write(f"{line.split('=')[0]} = {coffset+dz}\n")

            elif 'corner_x' in line:
                corner_x = float(line.split('=')[1])
                outfile.write(f"{line.split('=')[0]} = {corner_x+dx}\n")

            elif 'corner_y' in line:
                corner_y = float(line.split('=')[1])
                outfile.write(f"{line.split('=')[0]} = {corner_y+dy}\n")

            else:
                outfile.write(line)
            
    outfile.close()
    
def generate_geom_file(exp, run, det_type, input_file, output_file, det_dist=None, pv_camera_length=None):
    """
    Generate a Crystfel .geom file from either a psana .data or another
    Crystfel .geom file and set the coffset field for each panel based 
    on the estimated detector distance:
        coffset [m] = 1e-3 * (distance - clen)
    Supplying det_dist will override the value pulled from the deployed
    geometry for this run, which is used to compute the coffset parameter.
    
    Parameters
    ----------
    exp : str
        experiment name
    run : int
        run number
    det_type : str
        detector name
    input_file : str
        input .geom or .data file
    output_file : str
        output .geom file
    det_dist : float
        estimated sample-detector distance in mm
    pv_camera_length : str
        PV associated with the camera length
    """
    if 'CsPad' in det_type:
        sys.exit("Currently this function does not support the CsPad detector")
    
    if input_file.split('.')[-1] == 'data':
        geom = camera.CompoundAreaCamera.from_psana_file(input_file)
    elif input_file.split('.')[-1] == 'geom':
        if det_type == 'epix10k2M':
            geom = camera.CompoundAreaCamera.from_crystfel_file(input_file, element_type=sensors.Epix10kaSegment)
        else:
            geom = camera.CompoundAreaCamera.from_crystfel_file(input_file)
            
    psi = PsanaInterface(exp=exp, run=run, det_type=det_type)
    if det_dist is None:
        det_dist = psi.estimate_distance()
    coffset = (det_dist - psi.get_camera_length(pv_camera_length)) / 1000.
    
    geom.to_crystfel_file(output_file, coffset=coffset)
    
    
#### For command line use ####
            
def parse_input():
    """
    Parse command line input.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('-e', '--exp', help='Experiment name', required=True, type=str)
    parser.add_argument('-r', '--run', help='Run number', required=True, type=int)
    parser.add_argument('-d', '--det_type', help='Detector name, e.g epix10k2M or jungfrau4M',  required=True, type=str)
    parser.add_argument('-o', '--output_file', help='Output Crystfel geom file', required=True, type=str)
    parser.add_argument('-i', '--input_file', help='Tag to append to cxi file names', required=False, type=str, default='')
    parser.add_argument('--det_dist', help='Estimated distance between sample and detector in mm', required=False, type=float)
    
    return parser.parse_args()

if __name__ == '__main__':
    
    params = parse_input()
    temp_file = os.path.join(os.path.dirname(params.input_file), 'temp.geom')
    generate_geom_file(params.exp, params.run, params.det_type, params.input_file, temp_file, det_dist=params.det_dist)
    modify_crystfel_header(temp_file, params.output_file)
    os.remove(temp_file)
    print(f"CrystFEL geometry file saved to {params.output_file}")
